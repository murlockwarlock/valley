import pandas as pd
import random
import string
import time
import os
import pytz
import asyncio
from datetime import datetime
from colorama import Fore, Style, init
from eth_account import Account
import json

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
init(autoreset=True)

def log_message(message, level="info"):
    """–í—ã–≤–æ–¥–∏—Ç —Ü–≤–µ—Ç–Ω–æ–µ –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π."""
    now = datetime.now().strftime('%H:%M:%S')
    if level == "success":
        print(f"{Style.BRIGHT}{Fore.GREEN}[{now}] {message}{Style.RESET_ALL}")
    elif level == "error":
        print(f"{Style.BRIGHT}{Fore.RED}[{now}] {message}{Style.RESET_ALL}")
    elif level == "warning":
        print(f"{Style.BRIGHT}{Fore.YELLOW}[{now}] {message}{Style.RESET_ALL}")
    else:
        print(f"{Style.BRIGHT}{Fore.CYAN}[{now}] {message}{Style.RESET_ALL}")

async def random_delay(min_sec, max_sec):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∂–¥–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ."""
    delay = random.uniform(min_sec, max_sec) if min_sec < max_sec else min_sec
    log_message(f"–ü–∞—É–∑–∞: {int(delay)} —Å–µ–∫.", "info")
    await asyncio.sleep(delay)

def print_account_summary(account_data):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ –∏—Ç–æ–≥–∞–º —Ä–∞–±–æ—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞."""
    log_message("--- [ –ò—Ç–æ–≥–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É ] ---", "warning")
    email = account_data.get('email', 'N/A')
    
    summary = f"\n    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n    ‚îÇ üë§ –ü–æ—á—Ç–∞:     {email}\n"
    
    password = account_data.get('password')
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–æ—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    if pd.notna(password) and pd.isna(account_data.get('last_run')):
        summary += f"    ‚îÇ üîë –ü–∞—Ä–æ–ª—å:     {password}\n"
        
    summary += "    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    if account_data.get('bearer_token'):
        summary += f"    ‚îÇ ‚úÖ –°—Ç–∞—Ç—É—Å:         –û–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ\n"
        try:
            guardian_stats_raw = account_data.get('guardian_stats')
            if pd.notna(guardian_stats_raw) and isinstance(guardian_stats_raw, str):
                guardian_stats = json.loads(guardian_stats_raw)
                if guardian_stats:
                    guardian = guardian_stats[0]
                    loot_str = f"[{guardian.get('rarity', 'N/A').capitalize()}] {guardian.get('class', 'N/A').capitalize()}"
                    summary += f"    ‚îÇ üì¶ –î—Ä–æ–ø –∏–∑ –±–æ–∫—Å–∞: {loot_str}\n"
                    summary += f"    ‚îÇ ‚öîÔ∏è  –£—Ä–æ–Ω –≤–æ–∏–Ω–∞:    {guardian.get('damage', 0)}\n"
        except (json.JSONDecodeError, IndexError, TypeError):
            summary += "    ‚îÇ üì¶ –î—Ä–æ–ø –∏–∑ –±–æ–∫—Å–∞:   –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\n"
        
        total_damage = account_data.get('total_damage', 0)
        summary += f"    ‚îÇ üí• –û–±—â–∏–π —É—Ä–æ–Ω:     {total_damage if pd.notna(total_damage) else 0}\n"
        
        final_balance_raw = account_data.get('final_balance', 'N/A')
        final_balance = 'N/A'
        if pd.notna(final_balance_raw) and isinstance(final_balance_raw, (int, float)):
            final_balance = int(final_balance_raw)
        
        summary += f"    ‚îÇ üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {final_balance} GC\n"
    else:
        summary += f"    ‚îÇ ‚ùå –°—Ç–∞—Ç—É—Å:         –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞\n"
    
    summary += "    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    print(summary)

def generate_random_name():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ–ª–µ–µ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ–µ –∏–º—è —Å –≥–æ–¥–æ–º —Ä–æ–∂–¥–µ–Ω–∏—è."""
    first_names = ["John", "Peter", "Mike", "James", "Robert", "David", "Chris", "Steve", "Brian", "Kevin"]
    last_names = ["Smith", "Jones", "Williams", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor", "Martin"]
    year = random.randint(1985, 2005)
    return f"{random.choice(first_names)}{random.choice(last_names)}{year}"

def generate_random_password(length=12):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä."""
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for i in range(length))

def get_wallet_from_pk(private_key):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞."""
    try:
        pk = "0x" + private_key if not private_key.startswith("0x") else private_key
        return Account.from_key(pk).address
    except Exception as e:
        log_message(f"Invalid private key: {e}", "error"); return None

def get_iso_timestamp():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 UTC."""
    return datetime.now(pytz.utc).isoformat(timespec='milliseconds').replace('+00:00', 'Z')

def load_file(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, —É–±–∏—Ä–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º."""
    if not os.path.exists(filename):
        log_message(f"{filename} not found. Please create it.", "error"); return []
    with open(filename, 'r') as f:
        return [line.strip() for line in f if line.strip()]

def load_or_create_df(filename="accounts.xlsx"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç DataFrame –∏–∑ Excel –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω."""
    if os.path.exists(filename):
        try:
            return pd.read_excel(filename)
        except Exception as e:
            log_message(f"Could not read {filename}, maybe it's corrupted. Creating a new one. Error: {e}", "error")
    else:
        log_message(f"{filename} not found. Creating a new one.", "warning")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ DataFrame
    columns = ['email', 'password', 'proxy', 'user_agent', 'bearer_token', 'user_id', 'private_key', 'wallet_address', 'full_name', 'welcome_bonus_claimed', 'box_opened', 'guardian_stats', 'claimed_quests_log', 'last_run', 'referral_confirmed', 'wallet_address_added', 'total_damage', 'final_balance']
    return pd.DataFrame(columns=columns)

def save_df(df, filename="accounts.xlsx"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ Excel —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞."""
    try:
        df.to_excel(filename, index=False)
        log_message("Progress saved successfully.", "success")
    except PermissionError:
        log_message(f"Could not save to {filename}. PLEASE CLOSE THE FILE IF IT'S OPEN IN EXCEL.", "error")
    except Exception as e:
        log_message(f"Failed to save to {filename}: {e}", "error")
